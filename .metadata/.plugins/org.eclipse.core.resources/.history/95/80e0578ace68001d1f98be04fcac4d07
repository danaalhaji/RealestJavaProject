package com.axsos.realest.service;

import java.util.Optional;

import org.mindrot.jbcrypt.BCrypt;
import org.springframework.stereotype.Service;
import org.springframework.validation.BindingResult;

import com.axsos.realest.models.Company;
import com.axsos.realest.models.LoginUser;
import com.axsos.realest.models.User;
import com.axsos.realest.repository.CompanyRepository;
import com.axsos.realest.repository.RealEstateRepository;
import com.axsos.realest.repository.UserRepository;

@Service
public class AppService {
	private final CompanyRepository companyRepo;
	private final UserRepository userRepo;
	private final RealEstateRepository realRepo;
	public AppService(CompanyRepository companyRepo, UserRepository userRepo, RealEstateRepository realRepo) {
		this.companyRepo = companyRepo;
		this.userRepo = userRepo;
		this.realRepo = realRepo;
	}
	
	//****** USER Reg*************//	
	
    public User register(User newUser, BindingResult result) {
        if(userRepo.findByEmail(newUser.getEmail()).isPresent()) {
            result.rejectValue("email", "Unique", "This email is already in use!");
        }
        if(!newUser.getPassword().equals(newUser.getConfirm())) {
            result.rejectValue("confirm", "Matches", "The Confirm Password must match Password!");
        }
        if(result.hasErrors()) {
            return null;
        } else {
            String hashed = BCrypt.hashpw(newUser.getPassword(), BCrypt.gensalt());
            newUser.setPassword(hashed);
            return userRepo.save(newUser);
        }
    }
    
	//****** USER Login*************//	
    
    public User login(LoginUser newLogin, BindingResult result) {
        if(result.hasErrors()) {
            return null;
        }
        Optional<User> potentialUser = userRepo.findByEmail(newLogin.getEmail());
        if(!potentialUser.isPresent()) {
            result.rejectValue("email", "Unique", "Unknown email!");
            return null;
        }
        User user = potentialUser.get();
        if(!BCrypt.checkpw(newLogin.getPassword(), user.getPassword())) {
            result.rejectValue("password", "Matches", "Invalid Password!");
        }
        if(result.hasErrors()) {
            return null;
        } else {
            return user;
        }
    }
    public User findUserById(Long id) {
        Optional<User> u = userRepo.findById(id);

        if(u.isPresent()) {
            return u.get();
            } else {
            return null;
        }
    }
	
	//****** Company Registration*************//	
    public User registerCompany(Company newCompany, BindingResult result) {
        if(userRepo.findByEmail(newCompany.getEmail()).isPresent()) {
            result.rejectValue("email", "Unique", "This email is already in use!");
        }
        if(!newCompany.getPassword().equals(newCompany.getConfirm())) {
            result.rejectValue("confirm", "Matches", "The Confirm Password must match Password!");
        }
        if(result.hasErrors()) {
            return null;
        } else {
            String hashed = BCrypt.hashpw(newCompany.getPassword(), BCrypt.gensalt());
            newCompany.setPassword(hashed);
            return userRepo.save(newCompany);
        }
    }
    
}
